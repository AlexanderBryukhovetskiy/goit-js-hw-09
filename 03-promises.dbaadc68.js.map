{"mappings":"qhBAMA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAGpC,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAS,CAACC,EAASC,KAC5BC,YAAa,KACWC,KAAKC,SAAW,GAIpCJ,EAAQ,C,SAACH,E,MAAUC,IAGnBG,EAAO,C,SAACJ,E,MAAUC,MAEnBA,MAdSJ,SAASC,cAAc,yBAkB/BU,iBAAiB,SAE3B,SAAkBC,GAChBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOf,SAASC,cAAc,uBAAuBe,OACjE,MAAMC,EAAOF,OAAOf,SAASC,cAAc,sBAAsBe,OAC3DE,EAASH,OAAOf,SAASC,cAAc,wBAAwBe,OAIrE,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EAErDjB,EAAciB,EAAUL,GACrBM,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBiB,QAAQC,IAAI,uBAAqBnB,QAAiBC,OAClDmB,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAqBtB,QAAiBC,UAE/DsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBiB,QAAQC,IAAI,sBAAoBnB,QAAiBC,OACjDmB,EAAA1B,GAAS2B,OAAOG,QAAQ,sBAAoBxB,QAAeC,UAG/DU,GAASG,EAGXT,YAAa,KAAQT,EAAK6B,UAAiB,EAANd","sources":["src/js/03-promises.js"],"sourcesContent":["//Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n//Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\nimport Notiflix from \"notiflix\";\n\nconst form = document.querySelector('.form');\nconst submitBtn = document.querySelector('button[type = submit]');\n\nfunction createPromise(position, delay) {\n    return new Promise ((resolve, reject) => {\n      setTimeout ( () => {\n        const shouldResolve = Math.random() > 0.3;\n\n        if (shouldResolve) {\n          // Fulfill\n          resolve({position, delay});\n        } else {\n          // Reject\n          reject({position, delay});\n        }\n      }, delay);\n  });\n}\n\nsubmitBtn.addEventListener('click', onClick);\n\nfunction onClick (event) {\n  event.preventDefault();\n  \n  let delay = Number(document.querySelector('input[name = delay]').value);\n  const step = Number(document.querySelector('input[name = step]').value);\n  const amount = Number(document.querySelector('input[name = amount]').value);\n\n  \n  \n  for (let position = 1; position <= amount; position += 1) {\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n  }\n\n  setTimeout ( () => { form.reset();}, delay*2);\n}\n\n\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","Number","value","step","amount","position1","then","console","log","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.dbaadc68.js.map"}